datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

generator zod {
  provider = "zod-prisma-types"
  output   = "../src/generated/zod"
}

model User {
  id            String   @id
  name          String
  email         String
  image         String?
  emailVerified Boolean
  updatedAt     DateTime @updatedAt
  createdAt     DateTime @default(now())

  admin    Admin?
  student  Student?
  sessions Session[]
  accounts Account[]

  @@unique([email])
}

model Session {
  id        String   @id
  token     String
  userId    String
  ipAddress String?
  userAgent String?
  expiresAt DateTime
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
}

model Account {
  id                    String    @id
  userId                String
  accountId             String
  providerId            String
  scope                 String?
  idToken               String?
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  updatedAt             DateTime  @updatedAt
  createdAt             DateTime  @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Verification {
  id         String    @id
  value      String
  identifier String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?
}

model FcmToken {
  id        String @id @default(cuid())
  studentId String

  deviceId String?
  platform FcmPlatform
  token    String      @unique

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  student Student @relation(fields: [studentId], references: [userId], onDelete: Cascade)

  @@unique([studentId, deviceId])
}

model Notification {
  id        String  @id @default(cuid())
  studentId String
  messageId String?

  title String
  body  String
  url   String?

  isRead Boolean          @default(false)
  type   NotificationType @default(Update)

  createdAt DateTime @default(now())

  student Student @relation(fields: [studentId], references: [userId], onDelete: Cascade)
}
