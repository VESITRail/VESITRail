model Student {
  userId String @id

  firstName  String
  middleName String
  lastName   String

  address            String
  gender             Gender
  verificationDocUrl String
  dateOfBirth        DateTime
  status             StudentApprovalStatus @default(Pending)

  rejectionReason String?
  submissionCount Int     @default(1)

  reviewedAt DateTime?
  updatedAt  DateTime  @updatedAt
  createdAt  DateTime  @default(now())

  classId                     String
  stationId                   String
  reviewedById                String?
  preferredConcessionClassId  String
  preferredConcessionPeriodId String

  addressChanges AddressChange[]
  applications   ConcessionApplication[]

  class                     Class            @relation(fields: [classId], references: [id])
  station                   Station          @relation(fields: [stationId], references: [id])
  reviewedBy                Admin?           @relation(fields: [reviewedById], references: [userId])
  user                      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  preferredConcessionClass  ConcessionClass  @relation("StudentPreferredClass", fields: [preferredConcessionClassId], references: [id])
  preferredConcessionPeriod ConcessionPeriod @relation("StudentPreferredPeriod", fields: [preferredConcessionPeriodId], references: [id])
}

model Class {
  id String @id @default(uuid())

  code String @unique

  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  yearId   String
  branchId String

  students Student[]
  year     Year      @relation(fields: [yearId], references: [id])
  branch   Branch    @relation(fields: [branchId], references: [id])
}

model Branch {
  id String @id @default(uuid())

  code String @unique
  name String @unique

  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  classes Class[]
}

model Year {
  id String @id @default(uuid())

  code String @unique
  name String @unique

  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  classes Class[]
}

model AddressChange {
  id        String @id @default(uuid())
  studentId String

  newAddress   String
  newStationId String

  currentAddress   String
  currentStationId String

  rejectionReason String?
  submissionCount Int     @default(1)

  reviewedById       String?
  verificationDocUrl String?
  status             AddressChangeStatus @default(Pending)

  reviewedAt DateTime?
  updatedAt  DateTime  @updatedAt
  createdAt  DateTime  @default(now())

  student        Student @relation(fields: [studentId], references: [userId])
  reviewedBy     Admin?  @relation(fields: [reviewedById], references: [userId])
  newStation     Station @relation("NewStation", fields: [newStationId], references: [id])
  currentStation Station @relation("CurrentStation", fields: [currentStationId], references: [id])
}
